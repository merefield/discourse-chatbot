en:
  site_settings:
    chatbot_enabled: "Enable the chatbot plugin"
    chatbot_open_ai_token: "Your Open AI token. Will also be used as token if you set a custom URL to service other than Open AI. You can get one at <a target='_blank' rel='noopener' href='https://platform.openai.com/account/api-keys/'>openai.com</a>"
    chatbot_bot_type_low_trust: "(LOW TRUST USERS) To make the bot smarter, use 'RAG', which will enhance it will local deterministic functions (but be aware this uses many more calls to the LLM increasing cost significantly!). Maintain associated prompts at <a target='_blank' rel='noopener' href='/admin/customize/site_texts?q=chatbot.prompt.system.'>Customize Text</a>"
    chatbot_bot_type_medium_trust: "(MEDIUM TRUST USERS) To make the bot smarter, use 'RAG', which will enhance it will local deterministic functions (but be aware this uses many more calls to the LLM increasing cost significantly!). Maintain associated prompts at <a target='_blank' rel='noopener' href='/admin/customize/site_texts?q=chatbot.prompt.system.'>Customize Text</a>"
    chatbot_bot_type_high_trust: "(HIGH TRUST USERS) To make the bot smarter, use 'RAG', which will enhance it will local deterministic functions (but be aware this uses many more calls to the LLM increasing cost significantly!). Maintain associated prompts at <a target='_blank' rel='noopener' href='/admin/customize/site_texts?q=chatbot.prompt.system.'>Customize Text</a>"
    chatbot_open_ai_model_custom_low_trust: "(LOW TRUST USERS) Use Custom model name (ADVANCED USERS ONLY)"
    chatbot_open_ai_model_custom_name_low_trust: "(LOW TRUST USERS, CUSTOM ONLY) Name of model"
    chatbot_open_ai_model_custom_url_low_trust: "Populate it if you want to use proxy to Open AI or Azure OpenAI, e.g. https://custom-domain.openai.azure.com/openai/deployments/custom-name."
    chatbot_open_ai_model_medium_trust: "(MEDIUM TRUST USERS, UNLESS CUSTOM) The model to be accessed. More on supported models at <a target='_blank' rel='noopener' href='https://platform.openai.com/docs/models/overview'>OpenAI: Model overview</a>"
    chatbot_open_ai_model_custom_medium_trust: "(MEDIUM TRUST USERS) Use Custom model name (ADVANCED USERS ONLY)"
    chatbot_open_ai_model_custom_name_medium_trust: "(MEDIUM TRUST USERS, CUSTOM ONLY) Name of model"
    chatbot_open_ai_model_custom_url_medium_trust: "Populate it if you want to use proxy to Open AI or Azure OpenAI, e.g. https://custom-domain.openai.azure.com/openai/deployments/custom-name."
    chatbot_open_ai_model_high_trust: "(HIGH TRUST USERS, UNLESS CUSTOM) The model to be accessed. More on supported models at <a target='_blank' rel='noopener' href='https://platform.openai.com/docs/models/overview'>OpenAI: Model overview</a>"
    chatbot_open_ai_model_custom_high_trust: "(HIGH TRUST USERS) Use Custom model name (ADVANCED USERS ONLY)"
    chatbot_open_ai_model_custom_name_high_trust: "(HIGH TRUST USERS, CUSTOM ONLY) Name of model"
    chatbot_open_ai_model_custom_url_high_trust: "Populate it if you want to use proxy to Open AI or Azure OpenAI, e.g. https://custom-domain.openai.azure.com/openai/deployments/custom-name."
    chatbot_open_ai_model_custom_api_version: "Azure OpenAI REST API version. Required only when 'custom_api_type' is set to 'azure'. Refer to: <a target='_blank' rel='noopener' href='https://learn.microsoft.com/en-us/azure/ai-services/openai/reference'>Azure REST API reference</a>"
    chatbot_open_ai_model_custom_api_type: "Fill in 'azure' if you use Azure OpenAI, otherwise will use Open AI"
    chatbot_api_supports_name_attribute: "Check to use API message prompt name attribute for usernames.  May not work for some locales and models.  Keep unchecked if unsure.  If checked may save a small amount of tokens."
    chatbot_support_vision: "Bot 'Vision': support sharing of images with bot so you can ask it to describe them.  Images must be uploaded to forum and not hotlinked and in RAG mode bot can only see images in current Post it's responding to.  Requires compatible model to be selected.  'false' switches vision off, 'directly' will share images potentially on every call, 'via_function' will only share images when requested by a function which might turn out to be cheaper if main model is older generation"
    chatbot_open_ai_vision_model: "Open AI Vision model used when 'via_function' or 'directly' options are selected.  Used for all interaction if 'directly' is set, overriding all other model settings - caution: monitor costs, this might be expensive!"
    chatbot_support_picture_creation: "Bot 'Paint': support creation of images based on text descriptions.  Currently powered by DALL-E using the same token Open AI token"
    chatbot_reply_job_time_delay: 'Number of seconds before reply job is run. This helps prevent rate limits being hit and discourages spamming.  If you use bot vision, consider making this a higher number >=2 to help ensure Discourse has enough time to process images before the Post data gets sent to the bot, otherwise the bot may not see the image.'
    chatbot_include_whispers_in_post_history: "Include content of whispers in Post history bot sees (careful!)"
    chatbot_max_look_behind: "Maximum number of Posts or Chat Messages bot will consider as prompt for completion, the more the more impressive may be its response, but the more costly the interaction will be."
    chatbot_strip_quotes: "Determine if quotes are stripped and not sent within prompts (doesn't affect OP)"
    chatbot_permitted_in_private_messages: "Allow Chatbot to interact in Private Messages"
    chatbot_private_message_auto_title: "Automatically create a Topic title from the prior messages in a Private Message"
    chatbot_include_inner_thoughts_in_private_messages: "(FUNCTION DEBUG) Get Chatbot to post its background thinking on Private Messages (RAG only)"
    chatbot_include_inner_thoughts_in_topics: "(FUNCTION DEBUG) Get Chatbot to post its background thinking on Public Topics (RAG only)"
    chatbot_include_inner_thoughts_in_topics_as_whisper: "(FUNCTION DEBUG) Get Chatbot to post its background thinking on Public Topics as a whisper (RAG only)"
    chatbot_permitted_in_chat: "Allow Chatbot to interact in Chat"
    chatbot_can_trigger_from_whisper: "Allow Chatbot to be triggered from a whisper (get creative!)"
    chatbot_permitted_all_categories: "Allow Chatbot to interact in any Category"
    chatbot_permitted_categories: "Allow Chatbot to interact only in these Categories if not allowed to play in all"
    chatbot_auto_respond_categories: "Categories where Chatbot should reply to every first Post.  See each Category's Settings to inject a special prompt"
    chatbot_bot_user: "The Chatbot User"
    chatbot_quick_access_talk_button: "Display floating button which links to direct discussion one-to-one with the bot on specified channel type"
    chatbot_quick_access_talk_button_bot_icon: "Name of icon used for floating quick bot access button.  If blank it will use bot user's avatar instead. (if icon make sure it's permitted and added to svg_icon_subset if necessary)"
    chatbot_quick_access_bot_kicks_off: "Quick access launches a convesation in which the bot speaks first based on provided text at <a target='_blank' rel='noopener' href='/admin/customize/site_texts?q=chatbot.quick_access_kick_off.announcement'>Customize Text</a>"
    chatbot_quota_high_trust: "The allowed number of bot responses allowed by prompting user per week - high trust groups"
    chatbot_quota_medium_trust: "The allowed number of bot responses allowed by prompting user per week - medium trust groups"
    chatbot_quota_low_trust: "The allowed number of bot responses allowed by prompting user per week - low trust groups"
    chatbot_quota_reach_escalation_groups: "The group(s) to which the bot will escalate when the quota is reached"
    chatbot_quota_reach_escalation_cool_down_period: "The number of days the bot will wait before escalating again after reaching the quota"
    chatbot_high_trust_groups: "Groups considered high trust for bot interaction"
    chatbot_medium_trust_groups: "Groups considered medium trust for bot interaction"
    chatbot_low_trust_groups: "Groups considered low trust for bot interaction"
    chatbot_request_temperature: "Numeric value within the range of 0 to 200 to determine the level of randomization for AI responses. Higher temp = more creative, lower temp = more conservative. Refer to: <a target='_blank' rel='noopener' href='https://platform.openai.com/docs/api-reference/completions/create#completions/create-temperature/'>API docs: temperature</a>"
    chatbot_request_top_p: "Numeric value within the range of 0 to 100. Refer to: <a target='_blank' rel='noopener' href='https://platform.openai.com/docs/api-reference/completions/create#completions/create-top_p'>API docs: top_p</a>"
    chatbot_request_frequency_penalty: "Numeric value within the range of -200 to 200. Refer to: <a target='_blank' rel='noopener' href='https://platform.openai.com/docs/api-reference/completions/create#completions/create-frequency_penalty'>API docs: frequency_penalty</a>"
    chatbot_request_presence_penalty: "Numeric value within the range of -200 to 200. Refer to: <a target='_blank' rel='noopener' href='https://platform.openai.com/docs/api-reference/completions/create#completions/create-presence_penalty'>API docs: presence_penalty</a>"
    chatbot_max_response_tokens: "Specify the maximum amount of tokens bot will use to generate a response. Refer to: <a target='_blank' rel='noopener' href='https://openai.com/pricing'>OpenAI: Pricing</a>"
    chatbot_embeddings_enabled: "Enable the creation of embeddings for Chatbot (required for RAG mode to be able to retrieve site content).  This will run jobs to populate embeddings in background (rake task not required). Jobs will run even if Chatbot is disabled so that you can populate embeddings before enabling bot."
    chatbot_embeddings_benchmark_user_trust_level: "Trust level of benchmark user used to determine which Posts are embedded.  If this benchmark user can access a Post & it is not a Personal Message, it will be emdedded and content derived from such posts may be shared with all users.  Be careful not to unintentionally leak privileged information to lower trust levels so general advice is to keep this 0 or 1, but depends on the structure of your community and forum.  If you change this setting the system will gradually update the post embeddings to the new scope in the background."
    chatbot_embeddings_strategy: "The strategy used to determine if Post is in-scope for embedding, and thus if visible to the bot.  Choose 'benchmark_user' if you wish to determine inclusion by what a user at a specific trust level would see, or 'categories' if you wish to define visibility only by Category.  If you change this setting the system will gradually update the post embeddings to the new scope in the background."
    chatbot_embeddings_categories: "Categories to be included in embedding scope, if 'categories' strategy is selected.  If you change this setting the system will gradually update the post embeddings to the new scope in the background."
    chatbot_open_ai_embeddings_model: "For Embeddings only.  Open AI model used to capture embeddings for search.  Use latest model for highest performance.  If you change this setting the system will gradually update the post embeddings to the new model in the background.  You may wish to disable the plugin until this process is complete.  See supported models at <a target='_blank' rel='noopener' href='https://platform.openai.com/docs/models/embeddings'>OpenAI: Embedding Models</a>"
    chatbot_open_ai_embeddings_char_limit: "Maximum number of Post characters sent to Open AI to calculate embedding.  Keep as high as possible without experiencing an error"
    chatbot_open_ai_embeddings_model_custom_url: "For Embeddings only.  Populate it if you want to use proxy to Open AI or Azure OpenAI, e.g. https://custom-domain.openai.azure.com/openai/deployments/embeddings-custom-name."
    chatbot_forum_search_function_max_results: "Maximum number of Posts shown to bot from a forum search"
    chatbot_forum_search_function_similarity_threshold: "Fraction of 1.  The point at which a Post is included in the results is defined by how similar it is to the query with 1 being identical and zero being nothing like the query"
    chatbot_forum_search_function_reranking_strategy: "The strategy used to determine how Posts are reranked in the search results.  Choose 'none' for no reranking, 'group_promotion' to promote Posts from certain Groups, 'tag_promotion' to promote Posts within Topics with certain Tags, or 'both' to promote Posts from certain Groups and with certain Tags"
    chatbot_forum_search_function_reranking_groups: "Depending on the choice of the above strategy, Posts authored by these Groups are promoted in results set so their Posts are more likely to be seen and taken into account by the bot"
    chatbot_forum_search_function_reranking_tags: "Depending on the choice of the above strategy, Posts within Topics with these Tags are promoted in results set so their Posts are more likely to be seen and taken into account by the bot"
    chatbot_forum_search_function_include_topic_titles: "Include Topic titles in the search results"
    chatbot_forum_search_function_results_content_type: "The scope of content to be returned in the search results.  Choose 'posts' for just ranking Posts, 'topics' for the entire Topics that contain those ranked Posts"
    chatbot_forum_search_function_results_topic_max_posts_count_strategy: "The strategy used to determine the maximum number of Posts to be returned in the search results if content_type is 'topics'. Choose 'all' for all Posts, 'just_enough' to limit the Posts to only those up to including the ranked Post, 'stretch_if_required' to include all Posts up to the ranked Post regardless of the max setting, 'exact' for exactly the number of Posts specified in the max setting"
    chatbot_forum_search_function_results_topic_max_posts_count: "The maximum number of Posts to be returned in the search results if content_type is 'topics'"
    chatbot_tool_choice_first_iteration: "Choose if a tool must be used for the first iteration of the bots response thinking cycle.  If you choose 'force_local_forum_search' the bot will search the forum for information, if you choose 'force_a_function' the bot will use a function of its choice, if you choose 'not_forced' (default) the bot will not be forced to use a tool for its first cycle."
    chatbot_forum_search_function_hybrid_search: "(EXPERIMENTAL): Enable hybrid search mode.  This will cause the bot to search using native keyword search in addition to embedding based semantic search and it will attempt to blend the results"
    chatbot_url_integrity_check: "(EXPERIMENTAL): Enable URL integrity check.  If the LLM has returned an invalid forum URL, this will be highlighted back to the LLM"
    chatbot_locations_plugin_support: "(EXPERIMENTAL currently user locations only) Natural language querying capability for <a target='_blank' rel='noopener' href='https://github.com/paviliondev/discourse-locations'>Locations Plugin</a> (when using RAG mode, requires Locations Plugin to be installed)"
    chatbot_escalate_to_staff_function: "(EXPERIMENTAL, Chat only) if user requests human assistance or gets irritated, escalate to staff via PM (requires staff group to be populated)"
    chatbot_escalate_to_staff_groups: "(EXPERIMENTAL, Chat only) groups added to escalation PM, e.g. support team"
    chatbot_escalate_to_staff_max_history: "(EXPERIMENTAL, Chat only) number of chat messages included in transcript added to escalation PM"
    chatbot_news_api_token: "News API token for news (if left blank, news will never be searched)<a target='_blank' rel='noopener' href='https://newsapi.org/'>Get one at NewsAPI.org</a>"
    chatbot_firecrawl_api_token: "Firecrawl API token for crawling remote websites.  If left blank, crawling will not be available. <a target='_blank' rel='noopener' href='https://www.firecrawl.dev/'>Get one at https://www.firecrawl.dev/</a>"
    chatbot_jina_api_token: "Jina API token for web crawl and search.  <a target='_blank' rel='noopener' href='https://jina.ai'>Get one at https://jina.ai</a>. Alternative to Firecrawl and Serp.  If Firecrawl API token is populated, it will be used in preference to Jina for crawling. Ditto Serp API for Searching."
    chatbot_function_response_char_limit: "The maximum number of characters taken from the response from web crawl in order to mitigate the risk of a token breach when later including result in LLM call"
    chatbot_serp_api_key: "Serp API token for google search (if left blank, google will never be searched). <a target='_blank' rel='noopener' href='https://serpapi.com/'>Get one at SerpAPI.com</a>"
    chatbot_marketstack_key: "Marketstack API key for stock price information (if left blank, Marketstack will never be queried).<a target='_blank' rel='noopener' href='https://marketstack.com/'>Get one at MarketStack.com</a>"
    chatbot_enable_verbose_console_logging: "Enable response retrieval progress logging to console to help debug issues"
    chatbot_enable_verbose_rails_logging: "Enable response retrieval progress logging to rails logs to help debug issues. 'api_calls_only' restricts this to just API calls, 'all' logs all progress"
    chatbot_verbose_rails_logging_destination_level: "Choose which category of logs to send verbose logs to.  'warn' is useful in Production as 'info' logs are not exposed at /logs."
  chatbot:
    bio: "Hi, I'm not a real person. I'm a bot that can discuss things with you. Don't take me too seriously. Sometimes, I'm even right about stuff!"
    pm_prefix: "A Discussion with Chatbot"
    quick_access_kick_off:
      announcement: "Hello, how can I help you?"
    quota_reached:
      escalation:
        title: "Chatbot Quota Reached: %{username}"
        message: "I'm afraid user '%{username}' has reached their weekly quota for Chatbot interactions.  I'm escalating this issue to staff for further assistance."
    prompt:
      system:
        basic:
          open: You are a helpful assistant. When referring to users by name, include an @ symbol directly in front of their username.
          private: You are a helpful assistant. When referring to users by name, include an @ symbol directly in front of their username.
        rag:
          open: You are a helpful assistant.  You have great tools in the form of functions that give you the power to get newer information. Only use the functions you have been provided with.  The current date and time is %{current_date_time}.  When referring to users by name, include an @ symbol directly in front of their username.  Only respond to the last question, using the prior information as context, if appropriate.
          private: You are a helpful assistant.  You have great tools in the form of functions that give you the power to get newer information. Only use the functions you have been provided with.  The current date and time is %{current_date_time}.  When referring to users by name, include an @ symbol directly in front of their username.  Only respond to the last question, using the prior information as context, if appropriate.
          illegal_urls: "Your last response contained at least one URL which was not valid, please remove it and try again."
      title: "The subject of this conversation is %{topic_title}"
      first_post: "The first thing someone said was %{username} who said %{raw}"
      post: "%{username} said %{raw}"
      private_message:
        title_creation: "Create a short Topic title from summarising the prior messages"
      function:
        calculator:
          description: |
            Useful for getting the result of a math expression.  It is a general purpose calculator.  It works with Ruby expressions.

            You can retrieve the current date from it too and using the core Ruby Time method to calculate dates.

            The input to this tool should be a valid mathematical expression that could be executed by the base Ruby programming language with no extensions.

            Be certain to prefix any functions with 'Math.'

            Usage:
              Action Input: 1 + 1
              Action Input: 3 * 2 / 4
              Action Input: 9 - 7
              Action Input: Time.now - 2 * 24 * 60 * 60
              Action Input: Math.cbrt(13) + Math.cbrt(12)
              Action Input: Math.sqrt(8)
              Action Input: (4.1 + 2.3) / (2.0 - 5.6) * 3
          parameters:
            input: the mathematical expression you need to process and get the answer to. Make sure it is Ruby compatible.
          error: "'%{parameter}' is an invalid mathematical expression, make sure if you are trying to calculate dates use Ruby Time class"
        paint:
          description: |
            creates a picture based on the provided description
          parameters:
            description: a description of the picture the user wants to create
          error: there was an issue creating the picture.
        forum_search:
          description: |
            Search the local forum for information that may help you answer the question.  Especially useful when the forum specialises in the subject matter of the query.
            Searching the local forum is preferable to searching google or the internet and should be considered higher priority.  It is quicker and cheaper.

            Input should be a search query.  You can optionally also specify the number of posts you wish returned from your query.

            Outputs text from the Post and a url link to it you can provide the user.  When presenting the url in your reply, do not embed in an anchor, just write the straight link.
          parameters:
            query: "search query for looking up information on the forum"
            number_of_posts: "specify the number of posts you want returned from your query"
          answer:
            post:
              summary: "The top %{number_of_posts} posts on the forum related to this query are, best match first:\n\n"
              each: "Number %{rank}: the post is at this web address: %{url}, it was written by '%{username}' on %{date}, the text is '%{raw}' and the match score was: %{score}.\n\n"
            topic:
              summary: "The top %{number_of_topics} topics on the forum related to this query are, best match first:\n\n"
              each:
                topic: "Number %{rank}: the topic with title '%{title}' is at this web address: %{url}, the match score was: %{score} and contains the following posts:\n\n"
                post: "Post %{post_number}: the post was written by '%{username}' on %{date} and the text is '%{raw}'.\n\n"
          error:  "'%{query}': my search for this on the forum failed."
        vision:
          description: |
            Get a description of what appears in the posts image.  Outputs a text description of the contents of the image
          parameters:
            query: "the users query about the image"
          default_query: "please describe the contents of the image"
          answer: "The following is the description of the image in the post: %{description}.\n\n"
          error:  "There was an error when trying to access the image: '%{error}'"
        escalate_to_staff:
          description: |
            This function should be called whenever the customer confirms they have had their question answered or are getting angry with the bot and the conversation needs to be moved to a Private Message for staff to handle.  You must provide the user with a url of the new Private Message in your Chat response.
          title:  "Support bot chat escalation"
          announcement: "This is a follow-up Personal Message which includes Staff.  The following chat conversation was had between the user and the bot:\n\n%{content}"
          answer_summary: "The function ran and this chat has been successfully escalated and raised to the attention of staff.  A Personal Message to discuss things further with Staff has been created at the following url: %{url}.  I must now share this news & the url with the user.  There is no need for me to do anything more than communicate this fact with the web link and wish the user a good day."
          no_escalation_groups: "No escalation groups have been set up for this function.  Please contact your administrator."
          wrong_type_error: "This function cannot be used outside of Chat Messages"
          error:  "Escalation of user and bot chat failed"
        forum_get_user_address:
          description: |
            Return the location of the user given their username.  This might be where they live or work.

            Input should be a username.  Returns their address and coordinates.
          parameters:
            username: the username of the specific user for which you want to check the address and coordinates.
          answer_summary: "The user @%{username} is at: %{address}, which is at coordinates: latitude: %{latitude} and longitude: %{longitude}"
          error:  "we couldn't find an address for this user"
        forum_user_distance_from_location:
          description: |
            Return the distance of a user from a location specified by its coordinates in latitude and longitude.

            Input should be a username and a string representing the coordinates.
          parameters:
            username: the username of the specific user for which you want to check the distance.
            coords: the location you wish to determine the distance the user is from in latitude and longitude in the form "lon, lat", e.g. 30, 50
          answer_summary: "The user @%{username} is %{distance}km from %{coords} \n\n"
          error:  "the calculation of the distance the user is from the coordinates failed"
        return_coords_from_location_description:
          description: |
            To find the coordinates of a location.

            Takes a string query and returns coordinates in latitude and longitude.

            You might need to run this function first in order to get coordinates to use another function.
          parameters:
            query: "string representing the location to be found"
          answer_summary: "The coordinates of location '%{query}' are '%{coords}'."
          error:  "'%{query}': my search for the coords of the requested location failed"    
        forum_user_search_from_location:
          description: |
            Search the local forum for users that are located close to the specified coordinates.

            Input should be a two element array of latitude and longitude each in decimals.  You can optionally also specify the maximum distance from the coordinates and the maximum number of users you wish returned from your query.

            Outputs the usernames of users found in proximity. When responding with these usernames, use the @ symbol prefix (as if you were mentioning them).
          parameters:
            coords: "target location in latitude and longitude.  Correct order is critical."
            distance: "maximum distance from target coordinates in kilometres (km)"
            number_of_users: "specify the number of users you want returned from your query"
          answer_summary: "The users within %{distance} kilometres of %{query} are: "
          answer: "Number %{rank}: user: @%{username} distance: %{distance} km.  "
          error:  "'%{query}': my search for users in proximity to this target failed."
        forum_topic_search_from_location:
          description: |
            Search the local forum for topics that are located close to the specified coordinates.

            Input should be a two element array of latitude and longitude each in decimals.  You can optionally also specify the maximum distance from the coordinates and the maximum number of topics you wish returned from your query.

            Outputs the titles, addresses, links to the topicss found in proximity.
          parameters:
            coords: "target location in latitude and longitude.  Correct order is critical."
            distance: "maximum distance from target coordinates in kilometres (km)"
            number_of_topics: "specify the number of users you want returned from your query"
          answer_summary: "The users within %{distance} kilometres of %{query} are: "
          answer: "Number %{rank}: Topic Title: '%{title}'', Address: '%{address}' Link: '%{url}'.  "
          error:  "'%{query}': my search for users in proximity to this target failed."
        forum_user_search_from_user_location:
          description: |
            Search the local forum for users that are located close to specified user.

            Input should be a username.  You can optionally also specify the maximum distance from the user and the maximum number of users you wish returned from your query.

            Outputs the usernames of users found in proximity. When responding with these usernames, use the @ symbol prefix (as if you were mentioning them).
          parameters:
            username: "target username"
            distance: "maximum distance from target in kilometres (km)"
            number_of_users: "specify the maximum number of users you want returned from your query"
          answer_summary: "The users within %{distance} kilometres of %{query} are: "
          answer: "Number %{rank}: user: @%{username} distance: %{distance} km.  "
          error:  "'%{query}': my search for users in proximity to this target failed."
        forum_topic_search_from_user_location:
          description: |
            Search the local forum for topics that are located close to specified user.

            Input should be a username.  You can optionally also specify the maximum distance from the user and the maximum number of topics you wish returned from your query.

            Outputs the titles, addresses and urls of topics found in proximity.
          parameters:
            username: "target username"
            distance: "maximum distance from target in kilometres (km)"
            number_of_topics: "specify the maximum number of topics you want returned from your query"
          answer_summary: "The topics within %{distance} kilometres of %{query} are: "
          answer: "Number %{rank}: Topic Title: '%{title}'', Address: '%{address}' Link: '%{url}'.  "
          error:  "'%{query}': my search for users in proximity to this target failed."
        forum_user_search_from_topic_location:
          description: |
            Search the local forum for users that are located close to specified topic.

            Input should be a topic id.  You can optionally also specify the maximum distance from the topic and the maximum number of users you wish returned from your query.

            Outputs the usernames of users found in proximity. When responding with these usernames, use the @ symbol prefix (as if you were mentioning them).
          parameters:
            topic_id: "target topic id"
            distance: "maximum distance from target in kilometres (km)"
            number_of_posts: "specify the maximum number of users you want returned from your query"
          answer_summary: "The users within %{distance} kilometres of %{query} are: "
          answer: "Number %{rank}: user: @%{username} distance: %{distance} km.  "
          error:  "'%{query}': my search for users in proximity to this target failed."
        forum_topic_search_from_topic_location:
          description: |
            Search the local forum for topics that are located close to specified topic.

            Input should be a topic id.  You can optionally also specify the maximum distance from the topic and the maximum number of topics you wish returned from your query.

            Outputs the titles, addresses and urls of topics found in proximity.
          parameters:
            topic_id: "target topic id"
            distance: "maximum distance from target in kilometres (km)"
            number_of_topics: "specify the maximum number of topics you want returned from your query"
          answer_summary: "The topics within %{distance} kilometres of %{query} are: "
          answer: "Number %{rank}: Topic Title: '%{title}'', Address: '%{address}' Link: '%{url}'.  "
          error:  "'%{query}': my search for topics in proximity to this target failed."
        get_distance_between_locations:
          description: |
            Return the distance in kilometres(km) between two locations specified by two pairs of coordinates, both in form [latitude, longitude]
          parameters:
            coords: "location one in form [latitude, longitude]"
          answer_summary: "The distance between %{coords1} and %{coords2} is %{distance} kilometres (km)."
          error:  "'%{query}': my calculation for the distance between those two locations went wrong."
        web_search:
          description: |
            A wrapper around Web Search.

            Useful for when you need to answer questions about current events.
            Always one of the first options when you need to find information on internet.

            Input should be a search query.
          parameters:
            query: "search query for looking up information on the internet"
          error: "%{query}: my search for this on the internet failed."
        news:
          description: |
            A wrapper around the News API.

            Useful for when you need to answer questions about current events in the news, current events or affairs.

            Input should be a search query and a date from which to search news, so if the request is today, the search should be for todays date
          parameters:
            query: "query string for searching current news and events"
            start_date: "start date from which to search for news in format YYYY-MM-DD"
          answer: "The latest news about this is: "
          error: "ERROR: Had trouble retrieving the news!"
        web_crawler:
          description: |
            A wrapper around a web crawler API.

            Useful for when you need to get the content of a remote webpage for e.g. summarisation or fact retreival.

            Input should be the url of the target website.
          parameters:
            url: "the url of the target website."
          error: "ERROR: Had trouble crawling the target website!"
        stock_data:
          description: |
            An API for MarketStack stock data.  You need to call it using the stock ticker.  You can optionally also provide a specific date.
          parameters:
            ticker: "ticker for share or stock query"
            date: "date for data in format YYYY-MM-DD"
          answer: "Ticker %{ticker} had a day close of %{close} on %{date}, with a high of %{high} and a low of %{low}"
          error: "ERROR: Had trouble retrieving information from Market Stack for stock market information!"
        wikipedia:
          description: |
            A wrapper around Wikipedia.

            Useful for when you need to answer general questions about
            people, places, companies, facts, historical events, or other subjects.

            Input should be a search query
          parameters:
            query: "query string for wikipedia search"
          answer: "The relevant wikipedia page has the following summary: '%{summary}' and the article can be found at this url link: %{url}"
          error: "ERROR: Had trouble retrieving information from Wikipedia!"
      rag:
        call_function:
          error: "There was something wrong with your function arguments"
    errors:
      general: "Sorry, I'm not well right now. Lets talk some other time. Meanwhile, please ask the admin to check the logs, thank you!"
      retries: "I've tried working out a response for you several times, but ultimately failed.  Please contact the admin if this persists, thank you!"
      forbiddeninprivatemessages: "Use in private messages has not been permitted, please contact the admin"
      forbiddeninchat: "Use in Chat messages has not been permitted, please contact the admin"
      forbiddenoutsidethesecategories: "Public use of Chatbot has only been permitted in these Categories: "
      forbiddenanycategory: "Public use of Chatbot has not been enabled in any Category, please contact your admin"
      overquota: "I'm afraid you've reached this week's quota for bot interactions"
